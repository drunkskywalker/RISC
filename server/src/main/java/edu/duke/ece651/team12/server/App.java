/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.team12.server;

import edu.duke.ece651.team12.shared.*;
import java.io.*;
import java.net.*;
public class App {
  public static void main(String[] args) throws NumberFormatException,
                                                IndexOutOfBoundsException,
                                                ClassNotFoundException, IOException {
     /*
     V3Server s = new V3Server(4444);
     s.init();
     s.serve();
     */
    /*
    Server server = new Server(4444, num_players,  "Middle Earth", new BufferedReader((new InputStreamReader(System.in))), System.out);
    */
    // Server server = new Server();

    //    server.phase1createSocket();
    /*
    BufferedReader bfr = new BufferedReader(new InputStreamReader(System.in));
    Server server = null;
    try {
      int port = Integer.parseInt(args[0]);
      int num_player = Integer.parseInt(args[1]);
      int num_unit = Integer.parseInt(args[2]);
      int num_territories = Integer.parseInt(args[3]);
      server = new Server(
          port, num_player, num_unit, bfr, System.out, "Middle Earth", num_territories);
    }
    catch (NumberFormatException e) {
      System.out.println(
          "Format: ./server <port> <2/3/4(4 is only 24 territories)> <num_units> <6/24 territories>");
      return;
    }
    catch (IndexOutOfBoundsException e) {
      System.out.println(
          "Format: ./server <port> <2/3/4(4 is only 24 territories)> <num_units> <6/24 territories>");
      return;
    }
    try {
      server.init();
      server.play();
    }
    catch (SocketException e) {
      System.out.println("Network Error.");
    }
    catch (EOFException e) {
      System.out.println("Network Error.");
    }
    server.end();
<<<<<<< HEAD
    
    /*
=======
    *//*
>>>>>>> 5cd1246ae8ee8854952e864af3c2900ebc855d3a
    V2Server s = new V2Server(4444);
    try {
      s.init();

      while (true) {
        s.main();
      }
    }
    catch (Exception e) {
      System.out.println(e.getStackTrace());
      System.out.println(e.getMessage());
    }
    */

    /*Adds a shutdown hook to the Java runtime: When the program terminates, either normally or due to an unexpected event,  thishutdown hook's run() method will be called*/
    
    Runtime.getRuntime().addShutdownHook(new Thread() {
      @Override
      public void run() {
        System.out.println("Program terminated unexpectedly. Printing stack trace...");
        Thread.currentThread().dumpStack();
      }
    });

    
    V3Server s = new V3Server(4444);
    s.init();
    s.serve();
  }
}
