/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.team12.client;

import java.io.BufferedReader;
import java.io.EOFException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.SocketException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;

public class App {
  public static void main(String[] args) throws Exception {
    /*
    InputStream in = System.in;
    InputStreamReader is = new InputStreamReader(in);
    BufferedReader isr = new BufferedReader(is);
    Client client = null;
    try {
      if (args.length != 2) {
        throw new IndexOutOfBoundsException();
      }
      int port = Integer.parseInt(args[1]);
      client = new Client(args[0], port, isr, System.out);
    }
    catch (NumberFormatException e) {
      System.out.println("Format: ./client <host> <port>");
      return;
    }
    catch (IndexOutOfBoundsException e) {
      System.out.println("Format: ./client <host> <port>");
      return;
    }
    try {
      client.init();
      client.play();
    }
    catch (SocketException e) {
      System.out.println("Server has dropped connection. Terminating.");
    }
    catch (EOFException e) {
      System.out.println("Server has dropped connection. Terminating.");
    }
    client.end();

    *//*
    Socket sock = new Socket("127.0.0.1", 4444);
    System.out.println("Connecting...");
    System.out.println(sock);
    OutputStream os = sock.getOutputStream();
    ObjectOutputStream oos = new ObjectOutputStream(os);
    oos.flush();
    InputStream is = sock.getInputStream();
    ObjectInputStream ois = new ObjectInputStream(is);
    System.out.println("Here, here");
    oos.writeObject(1);
    oos.writeObject("Drunkskywalker");
    oos.writeObject("AAAAAA");
    oos.writeObject("AAAAAA");
    System.out.println((String)ois.readObject());
    HashMap<Integer, String> x = (HashMap<Integer, String>)ois.readObject();
    oos.writeObject(1);
    System.out.println((String)ois.readObject());
    x = (HashMap<Integer, String>)ois.readObject();

    oos.writeObject(-1);
    oos.writeObject(2);
    System.out.println((String)ois.readObject());
    System.out.println("Here, here");

    sock = new Socket("127.0.0.1", 4444);
    System.out.println("Connecting...");
    System.out.println(sock);
    os = sock.getOutputStream();

    oos = new ObjectOutputStream(os);
    oos.flush();
    is = sock.getInputStream();
    ois = new ObjectInputStream(is);
    System.out.println("Here, here");
    oos.writeObject(1);
    oos.writeObject("Drunk");
    oos.writeObject("AAAAAA");
    oos.writeObject("AAAAAA");
    System.out.println((String)ois.readObject());
    x = (HashMap<Integer, String>)ois.readObject();
    oos.writeObject(0);
    System.out.println((String)ois.readObject());
    */

    // initializes the input and output streams to read from and write to the console.
    InputStream in = System.in;
    InputStreamReader is = new InputStreamReader(in);
    BufferedReader isr = new BufferedReader(is);

    // creates a new instance of the V3Client class with necessary parameters and connects to the server.
    V3Client c = new V3Client("vcm-32083.vm.duke.edu", 4444, isr, System.out);
    c.connect();

    String uname;

    while (true) {
      // starts a loop that prompts the user to choose between logging in or registering. It continues to prompt the user until a valid choice is made.
      System.out.println("-1 for register, any other number for register.");
      int l_r;
      while (true) {
        try {
          l_r = Integer.parseInt(isr.readLine());
          break;
        }
        catch (Exception e) {
          System.out.println("give a number.");
        }
      }

      // This block is inside the previous loop. It asks the user to input their username and password.
      // Based on the user's choice, the client either registers a new account or logs in with an existing one.
      // If the operation is successful, the loop is broken.

      SimpleEntry<Integer, String> s;
      uname = isr.readLine();

      if (l_r == -1) {
        System.out.println("Input username, password, confirmation");
        s = c.Register(uname, isr.readLine(), isr.readLine());
        System.out.println(s.getValue());
        if (s.getKey() >= 0) {
          break;
        }
      }
      else {
        System.out.println("Input username, password");
        s = c.Login(isr.readLine(), isr.readLine());
        System.out.println(s.getValue());
        if (s.getKey() >= 0) {
          break;
        }
      }
    }

    // This block starts another loop, displaying the available games and prompting the user to join or start a new game.

    while (true) {
      SimpleEntry<Integer, String> s;

      HashMap<Integer, String> x = c.availableGames();
      System.out.println("Connected. Available games: ");

      for (Integer i : x.keySet()) {
        System.out.println("game id[" + i + "] : " + x.get(i));
      }

      //This block is inside the previous loop.
      //Based on the user's choice, it either starts a new game or joins an existing game.
      //If the operation is successful, it initializes the game with the username and starts the game.
      //The loop continues if the operation was unsuccessful.

      System.out.println(
          "Join or start?: input -1 for new game, a valid game id for join that game.");
      Integer j_s = Integer.parseInt(isr.readLine());

      if (j_s == -1) {
        System.out.println("Starting new game");
        s = c.newGame(2);
        if (s.getKey() == -1) {
          System.out.println(s.getValue());
          continue;
        }
      }

      else {
        System.out.println("Joining game");
        s = c.joinGame(j_s);

        if (s.getKey() == -1) {
          System.out.println(s.getValue());
          continue;
        }
      }

      System.out.println(s.getValue());

      c.initGame(uname);
      c.Play();
    }
  }
}
