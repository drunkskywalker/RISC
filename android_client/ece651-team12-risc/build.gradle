buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-clover-plugin:3.0.3'
    }

    
}

allprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'base'
    apply plugin: 'com.bmuschko.clover'
    dependencies {
        clover 'org.openclover:clover:4.4.1'
    }
}
clover {
    compiler {
        additionalArgs = "-g:lines,source,vars"
    }
}

subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    repositories {
        jcenter()
    }
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    dependencies {
        // Use JUnit Jupiter for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
        testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
        // This dependency is used by the application.
        implementation 'com.google.guava:guava:30.1.1-jre'
        clover 'org.openclover:clover:4.4.1'
        
    }
    clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }
    }
    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }

}

// Project specific stuff
project (':shared'){
}
project (':server'){
    dependencies {
        implementation project(':shared')
//        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
project (':client'){
    dependencies {
        implementation project(':shared')
//        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
clover {
    report{
        xml=true
        html=true
    }
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

tasks.register("resolveDependencies") {
   dependsOn project('server').getTasksByName('resolveDependencies',false)
   dependsOn project('client').getTasksByName('resolveDependencies',false)
   group = 'Build'
   description = 'Resolve/Download Dependencies'
}
